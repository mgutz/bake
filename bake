#!/bin/bash

# Credit: https://wiki.archlinux.org/index.php/Color_Bash_Prompt

# Reset
C_OFF='\033[0m'             # Text Reset

# Regular Colors
C_BLACK='\033[0;30m'        # Black
C_RED='\033[0;31m'          # Red
C_GREEN='\033[0;32m'        # Green
C_YELLOW='\033[0;33m'       # Yellow
C_BLUE='\033[0;34m'         # Blue
C_PURPLE='\033[0;35m'       # Purple
C_CYAN='\033[0;36m'         # Cyan
C_WHITE='\033[0;37m'        # White

# Bold
C_BBLACK='\033[1;30m'       # Black
C_BRED='\033[1;31m'         # Red
C_BGREEN='\033[1;32m'       # Green
C_BYELLOW='\033[1;33m'      # Yellow
C_BBLUE='\033[1;34m'        # Blue
C_BPURPLE='\033[1;35m'      # Purple
C_BCYAN='\033[1;36m'        # Cyan
C_BWHITE='\033[1;37m'       # White

# Underline
C_UBLACK='\033[4;30m'       # Black
C_URED='\033[4;31m'         # Red
C_UGREEN='\033[4;32m'       # Green
C_UYELLOW='\033[4;33m'      # Yellow
C_UBLUE='\033[4;34m'        # Blue
C_UPURPLE='\033[4;35m'      # Purple
C_UCYAN='\033[4;36m'        # Cyan
C_UWHITE='\033[4;37m'       # White

# Background
C_ON_BLACK='\033[40m'       # Black
C_ON_RED='\033[41m'         # Red
C_ON_GREEN='\033[42m'       # Green
C_ON_YELLOW='\033[43m'      # Yellow
C_ON_BLUE='\033[44m'        # Blue
C_ON_PURPLE='\033[45m'      # Purple
C_ON_CYAN='\033[46m'        # Cyan
C_ON_WHITE='\033[47m'       # White

# High Intensty
C_IBLACK='\033[0;90m'       # Black
C_IRED='\033[0;91m'         # Red
C_IGREEN='\033[0;92m'       # Green
C_IYELLOW='\033[0;93m'      # Yellow
C_IBLUE='\033[0;94m'        # Blue
C_IPURPLE='\033[0;95m'      # Purple
C_ICYAN='\033[0;96m'        # Cyan
C_IWHITE='\033[0;97m'       # White

# Bold High Intensty
C_BIBLACK='\033[1;90m'      # Black
C_BIRED='\033[1;91m'        # Red
C_BIGREEN='\033[1;92m'      # Green
C_BIYELLOW='\033[1;93m'     # Yellow
C_BIBLUE='\033[1;94m'       # Blue
C_BIPURPLE='\033[1;95m'     # Purple
C_BICYAN='\033[1;96m'       # Cyan
C_BIWHITE='\033[1;97m'      # White

# High Intensty backgrounds
C_ON_IBLACK='\033[0;100m'   # Black
C_ON_IRED='\033[0;101m'     # Red
C_ON_IGREEN='\033[0;102m'   # Green
C_ON_IYELLOW='\033[0;103m'  # Yellow
C_ON_IBLUE='\033[0;104m'    # Blue
C_ON_IPURPLE='\033[10;95m'  # Purple
C_ON_ICYAN='\033[0;106m'    # Cyan
C_ON_IWHITE='\033[0;107m'   # White


# Finds the directory containing a file.
#
# @param $1 The filename.
# @returns Assigns the directory to `bake_result`.
upsearch () {
  # from: http://unix.stackexchange.com/questions/13464/is-there-a-way-to-find-a-file-in-an-inverse-recursive-search
  local slashes=${PWD//[^\/]/}
  local directory=$PWD
  for (( n=${#slashes}; n>0; --n )); do
    test -e $directory/$1 && bake_result=$directory && return
    directory=$directory/..
  done
  bake_result=""
}


# Prints task list. Tasks are marked by preceding a function with a comment
# that starts with `# @task`
#
# Example:
#   # @task Build the project
#   task() { }
#
# @param $1 Bakefile
task-list () {
    # awk on OS X does not have gensub so using Perl which is installed
    # almost everywhere
    read -r -d '' task_script <<'SCRIPT'
    # search for task description
    if (s/^#\. (\w.*)$/\1/) {
        $desc = $1;
        $func = <>;

        # search for task name in this format "function task_name" or
        # "task_name ()"
        if (!($func =~ s/^.*function ([\w\-]+).*$/\1/)) {
            $func =~ s/^([\w\-]+).*\(\).*$/\1/;
        }
        chomp($func);
        printf "%-16s $desc\n", $func;
    }
SCRIPT
    perl -ne "$task_script" $1 | sort
    [[ $(type -t on-task-list) == "function" ]] && on-task-list
}


# Invokes function once.
#
# @param $1 Function to invoke.
bake-invoke () {
    local invoked
    for f in "$@"; do
        eval "invoked=\$$1_invoked"
        if [ ! "$invoked" == "1" ]; then
            eval $1_invoked=1
            "$@"
        fi
    done
}

# Prints a log message with no color.
#
# @example
#   bake-log "coffeescript" "compiling" "src/foo/test.coffee"
#
# @param $1 Action
# @param $2 Description
bake-log () {
    echo -e "      $1\t${2}"
}


# Prints an error message.
#
# @param $1 action
# @param $2 description
bake-error () {
    echo -e "${C_RED}ERROR $1\t${C_IRED}${2}${C_OFF}"
}


# Prints an info message.
#
# @param $1 action
# @param $2 description
bake-info () {
    echo -e "${C_CYAN}      $1\t${C_ICYAN}${2}${C_OFF}"
}


# Prints an ok message.
#
# @param $1 action
# @param $2 description
bake-ok () {
    echo -e "${C_GREEN}   OK ${C_IGREEN}$1\t${2}${C_OFF}"
}


# Exits the sript and prints our a message.
#
# @param $1 Exit code.
# @param $2 [optional] Message.
bake-exit() {
    [[ -n $2 ]] && echo $2
    exit $1
}


# source: http://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script
#
# Finds the path of an executable.
bake-which () {
    command -v $1
}


# Determines if executable exists.
bake-is-command () {
    bake-which $1 >/dev/null 2>&1
}

# Renders a heredoc-based template file
bake-render-template () {
	(
	trap 'rm -f $tempfile' EXIT
	tempfile=$(mktemp $(pwd)/templateXXXXXX)

	echo 'cat <<END_TEMPLATE' > $tempfile
	cat $1 >> $tempfile
	echo END_TEMPLATE >> $tempfile

	. $tempfile
	)
}


# Determines if target file is outdated (older than) reference.
#
# @param $1 target
# @param $2 reference
# @returns 0 if outdated, else 1
bake-outdated () {
    local target=$1
    local reference=$2

    # reference must exist
    [ ! -e $reference ] && bake-error "outdated" "Reference $2 not found" && return 1

    # outdated if target does not exist
    [ ! -e $target ] && return 0

    # outdated if target is older than reference
    [ $target -ot $reference ] && return 0

    return 1
}


# Main entry point into program.
main () {
    if [ "$bakefile" == "" ]; then
        upsearch Bakefile
        bakefile_dir=$bake_result
        bakefile=$bakefile_dir/Bakefile
    fi

    if [ -f $bakefile ]; then
        source $bakefile
        if [ "_$1" == "_" ]; then
            task-list $bakefile
        else
            # ensure working directory is from Bakefile
            pushd $bakefile_dir >/dev/null
            if [[ $(type -t $1) == "function" ]]; then
                "$@"
            elif [[ $(type -t on-task-not-found) == "function" ]]; then
                on-task-not-found "$@"
                [[ $? -eq 1 ]] && task-list $bakefile
            else
                task-list $bakefile
            fi
            popd > /dev/null
        fi
    else
        echo Bakefile not found in current or parent directories.
        exit 1
    fi
}

# Creates a `Bakefile` in current directory.
create-bakefile () {
    [ -f ./Bakefile ] && return 1
    echo "#!/bin/bash

function build {                    # Builds the project
    echo sample build task
}
" > Bakefile
    return 0
}

# Initializes the local directory with the `bake` script and sample `Bakefile`
local-init () {
    cp $0 .
    create-bakefile
    echo -e Bake copied locally. Run ${C_CYAN}./bake${C_OFF} to see it in action.
}

scriptdir() {
    local  __resultvar=$2
    local __real

    if [ -h $1 ]; then
        __real=$(dirname `readlink "$1"`)
    else
        __real=$(dirname "$1")
    fi
    # Symlinks are sometimes relative, so first move to where file is
    # then cd into real path
    eval $__resultvar="$(cd `dirname "$1"` && cd -P "$__real" && pwd )"
}

task-names () {
	upsearch Bakefile
	bakefile_dir=$bake_result
	bakefile=$bakefile_dir/Bakefile

	if [ -f $bakefile ]; then
		source $bakefile

    # awk on OS X does not have gensub so using Perl which is installed
    # almost everywhere
    read -r -d '' task_script <<'SCRIPT'
    # search for task description
    if (s/^#\. (\w.*)$/\1/) {
        $desc = $1;
        $func = <>;

        # search for task name in this format "function task_name" or
        # "task_name ()"
        if (!($func =~ s/^.*function ([\w\-]+).*$/\1/)) {
            $func =~ s/^([\w\-]+).*\(\).*$/\1/;
        }
        chomp($func);
        printf "%s", $func;
    }
SCRIPT
    perl -ne "$task_script" $1 | sort
    [[ $(type -t on-task-list) == "function" ]] && on-task-list
	fi
}




bake_app=`basename $0`
case "$1" in
    --install)
        if test -f /usr/local/bin/bake; then
            read -p 'A bake script already exists in /usr/local/bin.  Overwrite? (y/N)'
            test "$REPLY" == "y" || exit
        fi

        sudo ln -sf $PWD/bake /usr/local/bin
        ;;

    --init)
        create-bakefile && echo -e Bakefile created. Run ${C_CYAN}bake${C_OFF} to see it in action.
        ;;

    --init-local)
        local-init
        ;;

    --tasks)
	task-names
	;;

    *)
        if test "$1" == ""; then
            main "$@"
        elif test -f $1; then
            # allow scripts to be run by bake through #!
            # setting the bake_app displays usage with the script name instead of `bake`
            bake_app=`basename $1`
            bakefile=$1
            bakefile_dir=$PWD
            shift
            main "$@"
        elif test -d $1; then
            if test -f $1/Bakefile; then
                # allow scripts to be run by bake through #!
                # setting the bake_app displays usage with the script name instead of `bake`
                bake_app=bake
                bakefile=$1/Bakefile
                bakefile_dir=$1
                shift
                main "$@"
            else
                main "$@"
            fi
        else
            main "$@"
        fi
        ;;
esac

